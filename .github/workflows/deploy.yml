name: 'DeployToAzure'
on: 
  workflow_call:
    inputs:
      appName:
        required: true
        type: string
      environment:
        required: true
        type: string
      resourceGroupCode: 
        required: true
        type: string
      hubResourceGroupCode: 
        required: true
        type: string
      resourceGroupLocation:
        required: false
        type: string
        default: 'eastus'
      domainPrefix:
        required: true
        type: string
      testName:
        required: false
        type: string
        default: ''
      artifactName:
        required: false
        type: string
        default: 'website'
    secrets:
      azureCreds:
        required: true
      godaddyKey:
        required: false        
      godaddySecret:
        required: false
      certificateThumbprint:
        required: true
      integrationTestToken:
        required: false
      qaTestAccountUser:
        required: false        
      qaTestAccountPassword:
        required: false

env:
  webAppName: "app-gp${{ inputs.resourceGroupCode }}-${{ inputs.appName }}-${{ inputs.environment }}-${{ inputs.resourceGroupLocation }}"
  resourceGroupName: "rg-${{ inputs.resourceGroupCode }}-${{ inputs.environment }}"
  hubResourceGroupName: "rg-${{ inputs.hubResourceGroupCode }}-${{ inputs.environment }}"
  hostingName: "plan-gp${{inputs.resourceGroupCode}}-${{inputs.environment}}-${{inputs.resourceGroupLocation}}"
  storageName: "stgp${{ inputs.resourceGroupCode }}${{ inputs.environment }}${{inputs.resourceGroupLocation}}"
  appinsightsName: "appi-gp${{ inputs.hubResourceGroupCode }}-${{ inputs.environment }}-${{inputs.resourceGroupLocation}}"
  keyVaultName: kv-gp${{ inputs.hubResourceGroupCode }}-${{ inputs.environment }}-${{ inputs.resourceGroupLocation }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - id: check-godaddy-secrets
        run: echo "::set-output name=hasGoDaddyApiKey::${{ secrets.godaddyKey }}"

      - name: Checkout source code
        uses: actions/checkout@v2    
      - name: Download artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: ${{ inputs.artifactName }}
      #- name: Download Test project artifact
      #  uses: actions/download-artifact@v1.0.0
      #  with:
      #    name: testProject
              
      #- run: dir .
      - name: Replace Key Vaults url/name
        run: |
          sed -i 's/kv-gphub-dev-eastus/${{ env.keyVaultName }}/g' ${{ inputs.artifactName }}/*.config
          # sed -i 's/kv-gphub-dev-eastus/${{ env.keyVaultName }}/g' testProject/bin/*/*.config
        shell: bash  
      #- name: Run Unit Tests
      #  if: 0 == 1
      #  run: dotnet vstest testProject\bin\Release\**Tests.dll

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azureCreds }}
      - name: Deploy infrastructure 
        run: |
            Get-ChildItem -Path ${{ github.workspace }} -Recurse -Force
            az group create --location ${{ inputs.resourceGroupLocation }} --name ${{ env.hubResourceGroupName }}
            az group create --location ${{ inputs.resourceGroupLocation }} --name ${{ env.resourceGroupName }}
            ${{ github.workspace }}/src/PowerShell/DeployStorage.ps1 `
              -storageName "${{ env.storageName }}" `
              -resourceGroupName "${{ env.resourceGroupName }}" `
              -templatesLocation "${{ github.workspace }}/src/Templates"
            ${{ github.workspace }}/src/PowerShell/DeployWebHosting.ps1 `
              -hostingName "${{ env.hostingName }}" `
              -appinsightsName "${{ env.appinsightsName }}" `
              -resourceGroupName "${{ env.resourceGroupName }}" `
              -hubResourceGroupName "${{ env.hubResourceGroupName }}" `
              -templatesLocation "${{ github.workspace }}/src/Templates"
            ${{ github.workspace }}/src/PowerShell/DeployWebsite.ps1 `
              -appName "${{ env.webAppName }}" `
              -hostingName "${{ env.hostingName }}" `
              -storageName "${{ env.storageName }}" `
              -resourceGroupName "${{ env.resourceGroupName }}" `
              -templatesLocation "${{ github.workspace }}/src/Templates"
            ${{ github.workspace }}/src/PowerShell/Output.ps1
        shell: pwsh

      #Deploy the website  + Database + anything else to the infrastructure
      #Deploy service and website to Azure staging slots
      - name: Deploy website to Azure WebApp
        uses: Azure/webapps-deploy@v1
        with:
          app-name: "${{env.webAppName}}"
          package: ${{ inputs.artifactName }}
          slot-name: staging   
      - name: Set website configuration
        run: az webapp config appsettings set --name "${{env.webAppName}}" --resource-group "${{ env.resourceGroupName }}" --settings "Environment=${{ inputs.environment }}" --slot staging
      - name: Add access to key vault slot
        run: |
          $websiteStagingSlotIdentityPrincipalId = (az webapp identity assign --resource-group "${{ env.resourceGroupName }}" --name "${{env.webAppName}}" --slot staging | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
          az keyvault set-policy --name ${{ env.keyVaultName }} --object-id $websiteStagingSlotIdentityPrincipalId --secret-permissions list get

          $websiteSlotIdentityPrincipalId = (az webapp identity assign --resource-group "${{ env.resourceGroupName }}" --name "${{env.webAppName}}" | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
          az keyvault set-policy --name ${{ env.keyVaultName }} --object-id $websiteSlotIdentityPrincipalId --secret-permissions list get
        shell: pwsh
      - name: Create Subdomain for staging slot
        if: inputs.domainPrefix != '' && steps.check-godaddy-secrets.outputs.hasGoDaddyApiKey
        run: ${{ github.workspace }}/src/PowerShell/GoDaddy.ps1 `
          -godaddy_domain "govpilot.com" `
          -godaddy_name "${{ inputs.domainPrefix }}-${{inputs.environment}}-staging" `
          -godaddy_destination "${{env.webAppName}}-staging.azurewebsites.net" `
          -godaddy_type "CNAME" `
          -godaddy_key ${{ secrets.godaddyKey }} `
          -godaddy_secret ${{ secrets.godaddySecret }}
        shell: pwsh
      - name: Create Subdomain for production slot
        if: inputs.domainPrefix != '' && steps.check-godaddy-secrets.outputs.hasGoDaddyApiKey
        run: ${{ github.workspace }}/src/PowerShell/GoDaddy.ps1 `
          -godaddy_domain "govpilot.com" `
          -godaddy_name "${{ inputs.domainPrefix }}-${{inputs.environment}}" `
          -godaddy_destination "${{env.webAppName}}.azurewebsites.net" `
          -godaddy_type "CNAME" `
          -godaddy_key ${{ secrets.godaddyKey }} `
          -godaddy_secret ${{ secrets.godaddySecret }}
        shell: pwsh      
      - name: Download integration tests repo
        if: inputs.testName != ''
        uses: actions/checkout@v2
        with:
          repository: govpilot/integration_tests
          path: integration_tests
          token: ${{ secrets.integrationTestToken }}
      - name: Set up Python 3.8
        if: inputs.testName != ''
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        if: inputs.testName != ''
        run: |
          python -m pip install --upgrade pip
          pip install -e integration_tests/unit_tests
          pip install -r integration_tests/integration_requirements.txt
      - name: Test with pytest
        if: inputs.testName != ''
        env:
          QA_TEST_ACCOUNT_USER: ${{ secrets.qaTestAccountUser }}
          QA_TEST_ACCOUNT_PASSWORD: ${{ secrets.qaTestAccountPassword }}
          environment: '${{inputs.environment}}'
        run: pytest integration_tests/unit_tests/integration_tests.py -m ${{ inputs.testName }}

      - name: Swap website staging slot to production
        run: az webapp deployment slot swap --resource-group ${{ env.resourceGroupName }} --name "${{env.webAppName}}" --slot staging --target-slot production
        
      - name: Map domain & add ssl to the web app
        if: inputs.domainPrefix != ''
        run: |
          az webapp config hostname add --webapp-name "${{env.webAppName}}" --resource-group ${{env.resourceGroupName}} --hostname "${{inputs.domainPrefix}}-${{inputs.environment}}.govpilot.com"
          az webapp config ssl bind --certificate-thumbprint ${{secrets.certificateThumbprint}} --ssl-type SNI --name "${{env.webAppName}}" --resource-group ${{env.resourceGroupName}}
