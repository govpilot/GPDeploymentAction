name: 'GPDeploymentAction'
description: 'Deploy a web app to azure using key vault, godaddy sub-domain, end2end tests'
author: '@besmiralia'
inputs:
  app_name:
    required: true
    type: string
  environment:
    required: true
    type: string
  resourcegroup_code: 
    required: true
    type: string
  hub_resourcegroup_code: 
    required: true
    type: string
  resourcegroup_location:
    required: false
    type: string
    default: 'eastus'
  domain_prefix:
    required: true
    type: string
  test_name:
    required: false
    type: string
    default: ''
  artifact_name:
    required: false
    type: string
    default: 'website'
  azure_credentials:
    required: true
  godaddy_key:
    required: false        
  godaddy_secret:
    required: false
  certificate_thumbprint:
    required: true
  integration_test_token:
    required: false
  qa_test_account_user:
    required: false        
  qa_test_account_password:
    required: false

# env:
#   webapp_name: "app-gp${{ inputs.resourcegroup_code }}-${{ inputs.app_name }}-${{ inputs.environment }}-${{ inputs.resourcegroup_location }}"
#   resourcegroup_name: "rg-${{ inputs.resourcegroup_code }}-${{ inputs.environment }}"
#   hub_resourcegroup_name: "rg-${{ inputs.hub_resourcegroup_code }}-${{ inputs.environment }}"
#   hosting_name: "plan-gp${{inputs.resourcegroup_code}}-${{inputs.environment}}-${{inputs.resourcegroup_location}}"
#   storage_name: "stgp${{ inputs.resourcegroup_code }}${{ inputs.environment }}${{inputs.resourcegroup_location}}"
#   appinsights_name: "appi-gp${{ inputs.hub_resourcegroup_code }}-${{ inputs.environment }}-${{inputs.resourcegroup_location}}"
#   keyvault_name: "kv-gp${{ inputs.hub_resourcegroup_code }}-${{ inputs.environment }}-${{ inputs.resourcegroup_location }}"

runs:
  using: "composite"
  steps:
    - name: Set variables
      using: "core/set-env"
      env:
        - name: "webapp_name"
          value: "app-gp${{ inputs.resourcegroup_code }}-${{ inputs.app_name }}-${{ inputs.environment }}-${{ inputs.resourcegroup_location }}"
        - name: "resourcegroup_name"
          value: "rg-${{ inputs.resourcegroup_code }}-${{ inputs.environment }}"
        - name: "hub_resourcegroup_name"
          value: "rg-${{ inputs.hub_resourcegroup_code }}-${{ inputs.environment }}"
        - name: "hosting_name"
          value: "plan-gp${{inputs.resourcegroup_code}}-${{inputs.environment}}-${{inputs.resourcegroup_location}}"
        - name: "storage_name"
          value: "stgp${{ inputs.resourcegroup_code }}${{ inputs.environment }}${{inputs.resourcegroup_location}}"
        - name: "appinsights_name"
          value: "appi-gp${{ inputs.hub_resourcegroup_code }}-${{ inputs.environment }}-${{inputs.resourcegroup_location}}"
        - name: "kv-gp${{ inputs.hub_resourcegroup_code }}-${{ inputs.environment }}-${{ inputs.resourcegroup_location }}""
    - name: Checkout source code
      uses: actions/checkout@v2    
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: ${{ inputs.artifact_name }}

    - name: Replace Key Vaults url/name
      run: |
        sed -i 's/kv-gphub-dev-eastus/${{ env.keyvault_name }}/g' ${{ inputs.artifact_name }}/*.config
        # sed -i 's/kv-gphub-dev-eastus/${{ env.keyvault_name }}/g' testProject/bin/*/*.config
      shell: bash

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}
    - name: Deploy infrastructure 
      run: |
          az group create --location ${{ inputs.resourcegroup_location }} --name ${{ env.hub_resourcegroup_name }}
          az group create --location ${{ inputs.resourcegroup_location }} --name ${{ env.resourcegroup_name }}
          ${{ github.workspace }}/src/PowerShell/DeployStorage.ps1 `
            -storageName "${{ env.storage_name }}" `
            -resourceGroupName "${{ env.resourcegroup_name }}" `
            -templatesLocation "${{ github.workspace }}/src/Templates"
          ${{ github.workspace }}/src/PowerShell/DeployWebHosting.ps1 `
            -hostingName "${{ env.hosting_name }}" `
            -appinsightsName "${{ env.appinsights_name }}" `
            -resourceGroupName "${{ env.resourcegroup_name }}" `
            -hubResourceGroupName "${{ env.hub_resourcegroup_name }}" `
            -templatesLocation "${{ github.workspace }}/src/Templates"
          ${{ github.workspace }}/src/PowerShell/DeployWebsite.ps1 `
            -appName "${{ env.webapp_name }}" `
            -hostingName "${{ env.hosting_name }}" `
            -storageName "${{ env.storage_name }}" `
            -resourceGroupName "${{ env.resourcegroup_name }}" `
            -templatesLocation "${{ github.workspace }}/src/Templates"
          ${{ github.workspace }}/src/PowerShell/Output.ps1
      shell: pwsh

    #Deploy the website  + Database + anything else to the infrastructure
    #Deploy service and website to Azure staging slots
    - name: Deploy website to Azure WebApp
      uses: Azure/webapps-deploy@v1
      with:
        app-name: "${{env.webapp_name}}"
        package: ${{ inputs.artifact_name }}
        slot-name: staging   
    - name: Set website configuration
      run: az webapp config appsettings set --name "${{env.webapp_name}}" --resource-group "${{ env.resourcegroup_name }}" --settings "Environment=${{ inputs.environment }}" --slot staging
      shell: pwsh
    - name: Add access to key vault slot
      run: |
        $websiteStagingSlotIdentityPrincipalId = (az webapp identity assign --resource-group "${{ env.resourcegroup_name }}" --name "${{env.webapp_name}}" --slot staging | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
        az keyvault set-policy --name ${{ env.keyvault_name }} --object-id $websiteStagingSlotIdentityPrincipalId --secret-permissions list get

        $websiteSlotIdentityPrincipalId = (az webapp identity assign --resource-group "${{ env.resourcegroup_name }}" --name "${{env.webapp_name}}" | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
        az keyvault set-policy --name ${{ env.keyvault_name }} --object-id $websiteSlotIdentityPrincipalId --secret-permissions list get
      shell: pwsh
    - name: Create Subdomain for staging slot
      if: inputs.domain_prefix != '' && inputs.godaddy_key != '' && inputs.godaddy_secret != ''
      run: ${{ github.workspace }}/src/PowerShell/GoDaddy.ps1 `
        -godaddy_domain "govpilot.com" `
        -godaddy_name "${{ inputs.domain_prefix }}-${{inputs.environment}}-staging" `
        -godaddy_destination "${{env.webapp_name}}-staging.azurewebsites.net" `
        -godaddy_type "CNAME" `
        -godaddy_key ${{ inputs.godaddy_key }} `
        -godaddy_secret ${{ inputs.godaddy_secret }}
      shell: pwsh
    - name: Create Subdomain for production slot
      if: inputs.domain_prefix != '' && inputs.godaddy_key != '' && inputs.godaddy_secret != ''
      run: ${{ github.workspace }}/src/PowerShell/GoDaddy.ps1 `
        -godaddy_domain "govpilot.com" `
        -godaddy_name "${{ inputs.domain_prefix }}-${{inputs.environment}}" `
        -godaddy_destination "${{env.webapp_name}}.azurewebsites.net" `
        -godaddy_type "CNAME" `
        -godaddy_key ${{ inputs.godaddy_key }} `
        -godaddy_secret ${{ inputs.godaddy_secret }}
      shell: pwsh      
    - name: Download integration tests repo
      if: inputs.test_name != ''
      uses: actions/checkout@v2
      with:
        repository: govpilot/integration_tests
        path: integration_tests
        token: ${{ inputs.integration_test_token }}
    - name: Set up Python 3.8
      if: inputs.test_name != ''
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      if: inputs.test_name != ''
      run: |
        python -m pip install --upgrade pip
        pip install -e integration_tests/unit_tests
        pip install -r integration_tests/integration_requirements.txt
      shell: bash
    - name: Test with pytest
      if: inputs.test_name != ''
      env:
        QA_TEST_ACCOUNT_USER: ${{ inputs.qa_test_account_user }}
        QA_TEST_ACCOUNT_PASSWORD: ${{ inputs.qa_test_account_password }}
        environment: '${{inputs.environment}}'
      run: pytest integration_tests/unit_tests/integration_tests.py -m ${{ inputs.test_name }}
      shell: pwsh

    - name: Swap website staging slot to production
      run: az webapp deployment slot swap --resource-group ${{ env.resourcegroup_name }} --name "${{env.webapp_name}}" --slot staging --target-slot production
      shell: pwsh
      
    - name: Map domain & add ssl to the web app
      if: inputs.domain_prefix != ''
      run: |
        az webapp config hostname add --webapp-name "${{env.webapp_name}}" --resource-group ${{env.resourcegroup_name}} --hostname "${{inputs.domain_prefix}}-${{inputs.environment}}.govpilot.com"
        az webapp config ssl bind --certificate-thumbprint ${{inputs.certificate_thumbprint}} --ssl-type SNI --name "${{env.webapp_name}}" --resource-group ${{env.resourcegroup_name}}
      shell: pwsh
